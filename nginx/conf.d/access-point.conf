limit_req_zone $binary_remote_addr zone=one:10m rate=30r/s;
limit_conn_zone $binary_remote_addr zone=addr:10m;

client_body_buffer_size 128k;

map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

server {
	listen 80 default_server;
	listen [::]:80 default_server;
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	root /var/www/html;
	index index.html index.htm index.nginx-debian.html;
	server_name _;
	#ssl_certificate /etc/ssl/nginx/alastria-test.crt;
	#ssl_certificate_key /etc/ssl/nginx/alastria-test.key;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers HIGH:!aNULL:!MD5;
	client_body_timeout 10s;
	client_header_timeout 10s;
	# add CORS headers
	add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

	location / {
		# First attempt to serve request as file, then as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}
	location /ws {
		proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
		proxy_pass http://localhost:22001;
	}
	location /rpc {
		# Request rate and number of connections limitation
	    	limit_req zone=one burst=60 nodelay;
		limit_conn addr 10;
		# Whitelist/Blacklist
		include ./conf.d/whitelist;
		deny all;
		content_by_lua_block {
			ngx.req.read_body()
			local data = ngx.req.get_body_data()
			if data then
				if not (string.match(data,"eth_") or string.match(data,"net_") or string.match(data,"web3_")) then
					ngx.exit(403)
				else
					ngx.exec("@rpc_proxy")
				end
			end
		}
	}
	location @rpc_proxy {
		proxy_pass http://localhost:22000;
	}
}

